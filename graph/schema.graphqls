# GraphQL schema example
#
# https://gqlgen.com/getting-started/


type Student {
  id: ID!
  name: String!
  shifts: [Shift]
  role: Role!
  class: String!
}

scalar Time

type Shift {
  studentID: ID!
  start: Time
  end: Time
}

type RoomStay {
  stayID: ID!
  room: String!
  studentID: ID!
  groupSize: Int
  start: Time
  end: Time
}

enum Role {
  GUIDE
  INFRASTRUKTUR
  EMPFANG
  BUFFET
  KURZPRAESENTATIONEN
  PROJEKTVORSTELLUNGEN
  SONSTIGES
}

type Query {
  students: [Student!]!
  allWithRole(role: Role!): [Student!]!
  allInClass(class: String!): [Student!]!
  getStudentById(studentID: ID!): Student! # nil wenn ID nichts zur√ºckgibt oder error?

  allVisitsInRoom(room: String!): [RoomStay]!
  allRoomActivities: [RoomStay]!
  currentNumberOfPeople(room: String!): Int!
}

input NewStudent {
  name: String!
  role: Role!
  class: String!
}

input InputShift {
  start: Time,
  end: Time
}

input InputStudent {
  role: Role!
  class: String!
}

input EnterRoomInput{
  room: String!
  studentID: ID!
  groupSize: Int
  start: Time!
}

input LeaveRoomInput{
  roomStayID: ID!
  end: Time!
}

input RoomStayInput{
  room: String!
  studentID: ID!
  groupSize: Int
  start: Time!
  end: Time!
}

type Mutation {
  addStudent(input: NewStudent!): Student!
  addMeAsStudent(input: InputStudent!): Student!
  addShift(studentId: ID!, newShift: InputShift!): Student!
  addShifts(studentId: ID!,newShifts: [InputShift!]!): Student!

  updateShifts(studentId: ID!, newShifts: [InputShift!]!): Student!

  groupEntersRoom(enterRoom: EnterRoomInput!): RoomStay! #Returns room stay id, for later adding the leaving
  groupLeavesRoom(leaveRoom: LeaveRoomInput!): RoomStay!

  addRoomStay(input: RoomStayInput!): RoomStay!
}