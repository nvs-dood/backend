// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type EnterRoomInput struct {
	Room      string    `json:"room"`
	StudentID string    `json:"studentID"`
	GroupSize *int      `json:"groupSize"`
	Start     time.Time `json:"start"`
}

type InputShift struct {
	Start *time.Time `json:"start"`
	End   *time.Time `json:"end"`
}

type InputStudent struct {
	Role  Role   `json:"role"`
	Class string `json:"class"`
}

type NewStudent struct {
	Name  string `json:"name"`
	Role  Role   `json:"role"`
	Class string `json:"class"`
}

type RoomStayInput struct {
	Room      string    `json:"room"`
	StudentID string    `json:"studentID"`
	GroupSize *int      `json:"groupSize"`
	Start     time.Time `json:"start"`
	End       time.Time `json:"end"`
}

type Role string

const (
	RoleGUIDE                Role = "GUIDE"
	RoleInfrastruktur        Role = "INFRASTRUKTUR"
	RoleEmpfang              Role = "EMPFANG"
	RoleBuffet               Role = "BUFFET"
	RoleKurzpraesentationen  Role = "KURZPRAESENTATIONEN"
	RoleProjektvorstellungen Role = "PROJEKTVORSTELLUNGEN"
	RoleSonstiges            Role = "SONSTIGES"
)

var AllRole = []Role{
	RoleGUIDE,
	RoleInfrastruktur,
	RoleEmpfang,
	RoleBuffet,
	RoleKurzpraesentationen,
	RoleProjektvorstellungen,
	RoleSonstiges,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleGUIDE, RoleInfrastruktur, RoleEmpfang, RoleBuffet, RoleKurzpraesentationen, RoleProjektvorstellungen, RoleSonstiges:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
